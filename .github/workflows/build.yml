name: Build Electron App For Win/Mac

on:
  push:
    branches: [ master ]
    # tags:
      # - "v*.*.*"

jobs:

  release:
    # job's name
    name: build and release electron app

    # the type of machine to run the job on
    runs-on: ${{ matrix.os }}

    # create a build matrix for jobs
    strategy:
      fail-fast: false
      matrix:
        os: [macos-10.15]
        # os: [macos-10.15, windows-2019]

    # create steps
    steps:
      # step1: check out repository
      - name: Check out git repository
        uses: actions/checkout@v2

      # step2: install node env
      - name: Install Node.js
        uses: actions/setup-node@v2-beta
        
      # # step3: npm install
      # - name: npm install
      #   run: |
      #     yarn

      # step4: build app for mac/win
      # - name: build win app
      #   if: matrix.os == 'windows-2019'
      #   run: |
      #       yarn build:win --publish=always
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      # export CSC_LINK=$GITHUB_WORKSPACE/lyg.p12
      # export CSC_KEY_PASSWORD=1111
      # echo $CSC_LINK
      # echo $CSC_KEY_PASSWORD
      # cat $GITHUB_WORKSPACE/cat.txt
      # security find-identity -v -p codesigning

      # echo "export CSC_LINK=$GITHUB_WORKSPACE/lyg.p12" > ~/.bashrc
      # echo "export CSC_KEY_PASSWORD=1111" > ~/.bashrc
      # source ~/.bashrc

      # echo $CSC_LINK
      
      # - name: export code
      #   if: matrix.os == 'macos-10.15'
      #   run: |
      #     security find-identity -v -p codesigning
      #   env:
      #     CSC_LINK: $GITHUB_WORKSPACE/lyg.p12
      #     CSC_KEY_PASSWORD: 1111

      # - name: build mac app
      #   if: matrix.os == 'macos-10.15'
      #   run: |
      #       yarn build:mac --publish=always
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}


      - name: Codesign executable
        env: 
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > lyg1.p12
          security create-keychain -p 1111 build.keychain security default-keychain -s build.keychain
          security unlock-keychain -p 1111 build.keychain
          security import lyg1.p12 -k build.keychain -P 1111 -T /usr/bin/codesign
        # security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_CERTIFICATE_PWD build.keychain


      # /usr/bin/codesign --force -s lyg $GITHUB_WORKSPACE/build/mac/agroa -v


      # step5: cleanup artifacts in dist_electron
      # - name: cleanup artifacts for macosZ
      #   if: matrix.os == 'windows-2019'
      #   run: |
      #     npx rimraf "build/!(*.exe)"
      #     npx rimraf "build/latest.yml"

      # - name: cleanup artifacts for macosZ
      #   if: matrix.os == 'macos-10.15'
      #   run: |
      #     npx rimraf "build/!(*.dmg)"
      #     npx rimraf "build/latest-mac.yml"

      # step6: upload artifacts
      # - name: upload artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ matrix.os }}
      #     path: build

      # - name: Read package.json
      #   uses: tyankatsu0105/read-package-version-actions@v1
      #   with:
      #     path: './package/vitevui'
      #   id: package-version

      # - name: Read package.json
      #   uses: tyankatsu0105/read-package-version-actions@v1
      #   id: package-version


#       # step7: create release
      # - name: Create Release for Tag
      #   id: release_tag
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      #   with:
      #     tag_name: ${{ steps.package-version.outputs.version }}
      #     release_name: ${{ steps.package-version.outputs.version }}
      #     prerelease: true # 是否为预发布版本
      #     files: "build/**"
        
      # - name: release
      #   uses: softprops/action-gh-release@v1
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     files: "build/**"
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
